# encoding: utf-8

#  Copyright (C) 2012  Jan Bujak <j+cdata@jabster.pl>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#  As a special exception, you may create a larger work that contains part or
#  all of the C/C++ code generated by CData and distribute that work under
#  terms of your choice. If you modify this library, you may extend this
#  exception to your version of the library, but you are not obliged to do so.
#  If you do not wish to do so, delete this exception statement from your
#  version.

module CData

    INT_TYPES = [ 'unsigned char', 'unsigned short', 'unsigned int', 'unsigned long long', 'signed char', 'signed short', 'signed int', 'signed long long' ]
    INT_TYPES.each do |type|

        id = type.gsub( ' ', '_' ) + "_instance"

        IntType.define_singleton_method( id ) do

            instance = instance_variable_get( "@#{id}" )
            if instance == nil

                instance = IntType.new( type )
                instance_variable_set( "@#{id}", instance )

            end

            return instance

        end

    end

    class Serializer

        private

        def escape_cstring( string )

            is_plain_text = true
            string.bytes.each do |byte|

                next if byte >= 32 && byte <= 126 && byte != 34 && byte != 92
                is_plain_text = false

                break

            end

            if is_plain_text == false

                return string.bytes.collect { |byte| '\x%02X' % [ byte.ord ] }.join( '' )

            else

                return string

            end

        end

        def generate_new_id

            @last_id += 1
            return "%08i" % [ (@last_id - 1) ]

        end

    end

end
