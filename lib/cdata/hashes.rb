# encoding: utf-8

#  Copyright (C) 2012  Jan Bujak <j+cdata@jabster.pl>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#  As a special exception, you may create a larger work that contains part or
#  all of the C/C++ code generated by CData and distribute that work under
#  terms of your choice. If you modify this library, you may extend this
#  exception to your version of the library, but you are not obliged to do so.
#  If you do not wish to do so, delete this exception statement from your
#  version.

module CData

    def self.hashes_supported?

        return false

    end

end

begin

    require 'inline'

    module CData

        def self.hashes_supported?

            return true

        end

        private

        STRING_INLINE_C = <<-EOS
            unsigned int cdata_hash()
            {
                const char * string = RSTRING_PTR( self );
                long length = RSTRING_LEN( self );

                unsigned int hash = 0;
                unsigned int i = 0;
                for( ; i < length; ++i )
                {
                    hash += string[ i ];
                    hash += (hash << 10);
                    hash ^= (hash >> 6);
                }
                hash += (hash << 3);
                hash ^= (hash >> 11);
                hash += (hash << 15);
                return hash;
            }
        EOS

        FIXNUM_INLINE_C = <<-EOS
            unsigned int cdata_hash_inline()
            {
                unsigned int key = FIX2UINT( self );
                key = ( key + 0x7ed55d16 ) + ( key << 12 );
                key = ( key ^ 0xc761c23c ) ^ ( key >> 19 );
                key = ( key + 0x165667b1 ) + ( key <<  5 );
                key = ( key + 0xd3a2646c ) ^ ( key <<  9 );
                key = ( key + 0xfd7046c5 ) + ( key <<  3 );
                key = ( key ^ 0xb55a4f09 ) ^ ( key >> 16 );
                return key;
            }
        EOS

        FLOAT_INLINE_C = <<-EOS
            unsigned int cdata_cast_to_fixnum()
            {
                union { float f; unsigned u; } s;
                s.f = rb_num2dbl( self );

                return s.u & 0xffffff00;
            }
        EOS

    end

    class String

        inline( :C ) { |builder| builder.c CData::STRING_INLINE_C }

    end

    class Fixnum

        inline( :C ) { |builder| builder.c CData::FIXNUM_INLINE_C }

        def cdata_hash

            if self >= 2 ** 32

                return (((self >> 32) & 0xffffffff) ^ (self & 0xffffffff)).cdata_hash_inline

            elsif self <= (2 ** 32 - 1) * -1

                value = (18446744073709551616 + self)
                return (((value >> 32) & 0xffffffff) ^ (value & 0xffffffff)).cdata_hash_inline

            elsif self < 0

                return (4294967296 + self).cdata_hash_inline

            else

                return cdata_hash_inline

            end

        end

    end

    class Float

        inline( :C ) { |builder| builder.c CData::FLOAT_INLINE_C }

        def cdata_hash

            return cdata_cast_to_fixnum().cdata_hash

        end

    end

    class TrueClass

        def cdata_hash

            return 1.cdata_hash

        end

    end

    class FalseClass

        def cdata_hash

            return 0.cdata_hash

        end

    end

    class NilClass

        def cdata_hash

            return 0

        end

    end

    rescue LoadError => exception

        STDERR.puts "#{exception.to_s.capitalize}; hash serialization will be disabled."

end
